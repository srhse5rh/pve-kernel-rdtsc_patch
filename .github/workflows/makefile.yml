name: Makefile CI
on:
  push:
  workflow_dispatch:
    inputs:
      commitid:
        description: "commitid"
        required: false
        type: string
      debianversion:
        description: "debianversion"
        required: false
        type: string

env:
  commitid: bookworm-6.5
  debianversion: bookworm

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: set env
        run: |
          if [ ! '${{ inputs.patch }}' = '' ];
          then
            echo "patch=${{ inputs.patch }}" >> "${{ github.env }}"
          fi
          if [ ! '${{ inputs.commitid }}' = '' ];
          then
            echo "commitid=${{ inputs.commitid }}" >> "${{ github.env }}"
          fi
          if [ ! '${{ inputs.debianversion }}' = '' ];
          then
            echo "debianversion=${{ inputs.debianversion }}" >> "${{ github.env }}"
          fi

      - uses: actions/checkout@v4

      - name: Run the build process with Docker
        uses: addnab/docker-run-action@v3
        with:
          image: debian:${{ env.debianversion }}
          options: -v ${{ github.workspace }}:/build
          run: |
            apt update
            apt install git wget -y
            echo "deb [arch=amd64] http://download.proxmox.com/debian/pve ${{ env.debianversion }} pve-no-subscription" > /etc/apt/sources.list.d/pve-install-repo.list
            wget https://enterprise.proxmox.com/debian/proxmox-release-${{ env.debianversion }}.gpg -O /etc/apt/trusted.gpg.d/proxmox-release-${{ env.debianversion }}.gpg
            apt update
            apt install devscripts proxmox-ve -y
            cd build
            git clone git://git.proxmox.com/git/pve-kernel.git
            cd pve-kernel
            git reset --hard ${{ env.commitid }}
            #git submodule update --init
            apt install dh-virtualenv dwarves libdw-dev libiberty-dev lz4 dh-python python3
            echo ---installed env---
            apt list
            mk-build-deps --install --tool "apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends -y" debian/control
            make build-dir-fresh
            
            if [ -z $(grep -r "EDITED BY SED" "$(pwd)/submodules/ubuntu-kernel/arch/x86/kvm/svm/svm.c") ]; then
                line_1=$(( $(grep -n "kvm_handle_invpcid(vcpu, type, gva);" submodules/ubuntu-kernel/arch/x86/kvm/svm/svm.c | awk '{print $1;}' | cut -f1 -d ':')+2))
                sed -i "${line_1}a\
            \
            /* EDITED BY SED */\n\
            u32 print_once = 1;\n\
            static int handle_rdtsc_interception(struct kvm_vcpu *vcpu)\n\
            {\n\
            static u64 rdtsc_fake = 0;\n\
            static u64 rdtsc_prev = 0;\n\
            u64 rdtsc_real = rdtsc();\n\
            if(print_once)\n\
            {\n\
                    printk(\"[handle_rdtsc] fake rdtsc svm function is working\\n\");\n\
                    print_once = 0;\n\
                    rdtsc_fake = rdtsc_real;\n\
            }\n\
            \n\
            if(rdtsc_prev != 0)\n\
            {\n\
                    if(rdtsc_real > rdtsc_prev)\n\
                    {\n\
                            u64 diff = rdtsc_real - rdtsc_prev;\n\
                            u64 fake_diff =  diff / 20; // if you have 3.2Ghz on your vm, change 20 to 16\n\
                            rdtsc_fake += fake_diff;\n\
                    }\n\
            }\n\
            if(rdtsc_fake > rdtsc_real)\n\
            {\n\
                    rdtsc_fake = rdtsc_real;\n\
            }\n\
            rdtsc_prev = rdtsc_real;\n\
            \n\
            vcpu->arch.regs[VCPU_REGS_RAX] = rdtsc_fake & -1u;\n\
            vcpu->arch.regs[VCPU_REGS_RDX] = (rdtsc_fake >> 32) & -1u;\n\
            \n\
            return svm_skip_emulated_instruction(vcpu);\n\
                }" "$(pwd)/submodules/ubuntu-kernel/arch/x86/kvm/svm/svm.c"
                
                line_2=$(( $(grep -n "svm_set_intercept(svm, INTERCEPT_RSM);" submodules/ubuntu-kernel/arch/x86/kvm/svm/svm.c | awk '{print $1;}' | cut -f1 -d ':')+0))
                sed -i "${line_2}a\
                svm_set_intercept(svm, INTERCEPT_RDTSC);" "$(pwd)/submodules/ubuntu-kernel/arch/x86/kvm/svm/svm.c"
                line_3=$(( $(grep -n "SVM_EXIT_VMGEXIT" submodules/ubuntu-kernel/arch/x86/kvm/svm/svm.c | awk '{print $1;}' | cut -f1 -d ':')+0))
                sed -i "${line_3}a\
                [SVM_EXIT_RDTSC]			= handle_rdtsc_interception" "$(pwd)/submodules/ubuntu-kernel/arch/x86/kvm/svm/svm.c"
            fi
            make deb

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4.3.1
        with:
          path: pve-kernel/*.deb
